#pragma once

#include <cuda_runtime.h>
#include <helper_cuda.h>
#include <helper_functions.h>



template <typename T, int QVecSize, MemoryLayoutType MemoryLayout, Collision collisionType>
__global__ void streamingPush(ComputeUnitStreaming<T, QVecSize, MemoryLayout, collisionType, Simple> &cu){

    tNi index = blockIdx.x * blockDim.x + threadIdx.x;

    if ((index & 1) == 0) {

        for (tNi i=1; i<=cu.xg1; i++){
            for (tNi j=1; j<=cu.yg1; j++){
                for (tNi k=1; k<=cu.zg1; k++){
                    //DST    =  SRC
                    cu.Q[cu.dirnQ02(i,j,k)].q[Q02] = cu.Q[cu.index(i, j, k)].q[Q02];
                    cu.Q[cu.dirnQ04(i,j,k)].q[Q04] = cu.Q[cu.index(i, j, k)].q[Q04];
                    cu.Q[cu.dirnQ06(i,j,k)].q[Q06] = cu.Q[cu.index(i, j, k)].q[Q06];


                    cu.Q[cu.dirnQ08(i,j,k)].q[Q08] = cu.Q[cu.index(i, j, k)].q[Q08];
                    cu.Q[cu.dirnQ10(i,j,k)].q[Q10] = cu.Q[cu.index(i, j, k)].q[Q10];

                    cu.Q[cu.dirnQ12(i,j,k)].q[Q12] = cu.Q[cu.index(i, j, k)].q[Q12];
                    cu.Q[cu.dirnQ14(i,j,k)].q[Q14] = cu.Q[cu.index(i, j, k)].q[Q14];

                    cu.Q[cu.dirnQ16(i,j,k)].q[Q16] = cu.Q[cu.index(i, j, k)].q[Q16];
                    cu.Q[cu.dirnQ18(i,j,k)].q[Q18] = cu.Q[cu.index(i, j, k)].q[Q18];

                }
            }
        }
    }

    if ((index & 1) == 1) {
        for (tNi i=cu.xg1;  i>=1; i--) {
            for (tNi j=cu.yg1;  j>=1; j--) {
                for (tNi k=cu.zg1;  k>=1; k--) {

                    //DST   =   SRC
                    cu.Q[cu.dirnQ01(i,j,k)].q[Q01] = cu.Q[cu.index(i, j, k)].q[Q01];
                    cu.Q[cu.dirnQ03(i,j,k)].q[Q03] = cu.Q[cu.index(i, j, k)].q[Q03];
                    cu.Q[cu.dirnQ05(i,j,k)].q[Q05] = cu.Q[cu.index(i, j, k)].q[Q05];


                    cu.Q[cu.dirnQ07(i,j,k)].q[Q07] = cu.Q[cu.index(i, j, k)].q[Q07];
                    cu.Q[cu.dirnQ09(i,j,k)].q[Q09] = cu.Q[cu.index(i, j, k)].q[Q09];

                    cu.Q[cu.dirnQ11(i,j,k)].q[Q11] = cu.Q[cu.index(i, j, k)].q[Q11];
                    cu.Q[cu.dirnQ13(i,j,k)].q[Q13] = cu.Q[cu.index(i, j, k)].q[Q13];

                    cu.Q[cu.dirnQ15(i,j,k)].q[Q15] = cu.Q[cu.index(i, j, k)].q[Q15];
                    cu.Q[cu.dirnQ17(i,j,k)].q[Q17] = cu.Q[cu.index(i, j, k)].q[Q17];

                }
            }
        }
    }
}

template <typename T, int QVecSize, MemoryLayoutType MemoryLayout, Collision collisionType>
__global__ void streamingPushDir(ComputeUnitStreaming<T, QVecSize, MemoryLayout, collisionType, Simple> &cu, tNi direction){

    tNi index1 = blockIdx.x * blockDim.x + threadIdx.x;
    tNi index2 = blockIdx.y * blockDim.y + threadIdx.y;
    int reverse = blockIdx.z * blockDim.z + threadIdx.z;

    if (direction == Q01) {
        tNi j = index1;
        tNi k = index2;
        if ((j < 1) || (j > cu.yg1) || (k < 1) || (k > cu.zg1)) {
            return;
        }
        if ((reverse & 1) == 0) {
            for (tNi i=1; i<=cu.xg1; i++){
                cu.Q[cu.dirnQ02(i,j,k)].q[Q02] = cu.Q[cu.index(i, j, k)].q[Q02];
            }
        } else {
            for (tNi i=cu.xg1;  i>=1; i--) {
                cu.Q[cu.dirnQ01(i,j,k)].q[Q01] = cu.Q[cu.index(i, j, k)].q[Q01];
            }
        }
    }

    if (direction == Q03) {
        tNi i = index1;
        tNi k = index2;
        if ((i < 1) || (i > cu.xg1) || (k < 1) || (k > cu.zg1)) {
            return;
        }
        if ((reverse & 1) == 0) {
            for (tNi j=1; j<=cu.yg1; j++){
                cu.Q[cu.dirnQ04(i,j,k)].q[Q04] = cu.Q[cu.index(i, j, k)].q[Q04];
            }
        } else {
            for (tNi j=cu.yg1;  j>=1; j--) {
                cu.Q[cu.dirnQ03(i,j,k)].q[Q03] = cu.Q[cu.index(i, j, k)].q[Q03];
            }
        }
    }

    if (direction == Q05) {
        tNi i = index1;
        tNi j = index2;
        if ((i < 1) || (i > cu.xg1) || (j < 1) || (j > cu.yg1)) {
            return;
        }
        if ((reverse & 1) == 0) {
            for (tNi k=1; k<=cu.zg1; k++){
                cu.Q[cu.dirnQ06(i,j,k)].q[Q06] = cu.Q[cu.index(i, j, k)].q[Q06];
            }
        } else {
            for (tNi k=cu.zg1;  k>=1; k--) {
                cu.Q[cu.dirnQ05(i,j,k)].q[Q05] = cu.Q[cu.index(i, j, k)].q[Q05];
            }
        }
    }

%{
    parameters = [("Q07", "Q08", "XY", "z", "x", "y", "k", "i", "j", "Q13", "Q14"), 
                  ("Q09", "Q10", "XZ", "y", "x", "z", "j", "i", "k", "Q15", "Q16"), 
                  ("Q11", "Q12", "YZ", "x", "y", "z", "i", "j", "k", "Q17", "Q18")]
}%
% for dir,oppositeDir,planeAxes,orthogonalCoordinate,planeAxis1,planeAxis2,orthogonalIndex,axis1Index,axis2Index,dir90,oppositeDir90 in parameters:
    //index1 \in [1 ... cu.${orthogonalCoordinate}g1]
    //index2 \in [1 ... cu.${planeAxis1}g1 + cu.${planeAxis2}g1]
    //
    if (direction == ${dir}) {
        tNi sum${planeAxes} = cu.${planeAxis1}g1 + cu.${planeAxis2}g1;
        tNi min${planeAxes} = min(cu.${planeAxis1}g1, cu.${planeAxis2}g1);
        if ((index1 < 1) || (index1 > cu.${orthogonalCoordinate}g1) || (index2 < 1) || (index2 > (sum${planeAxes} - 1))) { 
            return;
        }
        tNi ${orthogonalIndex} = index1;
        tNi steps = min(min(index2, sum${planeAxes} - index2), min${planeAxes});

        if ((reverse & 1) == 0) {
            tNi ${axis1Index} = max(1l, index2 - cu.${planeAxis2}g1 + 1);
            tNi ${axis2Index} = max(1l, cu.${planeAxis2}g1 + 1 - index2);
            for (tNi s=1; s<=steps; s++){
                cu.Q[cu.dirn${oppositeDir}(i,j,k)].q[${oppositeDir}] = cu.Q[cu.index(i, j, k)].q[${oppositeDir}];
                ${axis1Index}++, ${axis2Index}++;
            }
        } else {
            tNi ${axis1Index} = min(cu.${planeAxis1}g1, index2);
            tNi ${axis2Index} = min(cu.${planeAxis2}g1, sum${planeAxes} - index2);
            for (tNi s=1; s<=steps; s++){
                cu.Q[cu.dirn${dir}(i,j,k)].q[${dir}] = cu.Q[cu.index(i, j, k)].q[${dir}];
                ${axis1Index}--, ${axis2Index}--;
            }
        }
    }

    if (direction == ${dir90}) {
        tNi sum${planeAxes} = cu.${planeAxis1}g1 + cu.${planeAxis2}g1;
        tNi min${planeAxes} = min(cu.${planeAxis1}g1, cu.${planeAxis2}g1);
        if ((index1 < 1) || (index1 > cu.${orthogonalCoordinate}g1) || (index2 < 1) || (index2 > (sum${planeAxes} - 1))) { 
            return;
        }
        tNi ${orthogonalIndex} = index1;
        tNi steps = min(min(index2, sum${planeAxes} - index2), min${planeAxes});

        if ((reverse & 1) == 0) {
            tNi ${axis1Index} = max(1l, index2 - cu.${planeAxis2}g1 + 1);
            tNi ${axis2Index} = min(cu.${planeAxis2}g1, index2);
            for (tNi s=1; s<=steps; s++){
                cu.Q[cu.dirn${oppositeDir90}(i,j,k)].q[${oppositeDir90}] = cu.Q[cu.index(i, j, k)].q[${oppositeDir90}];
                ${axis1Index}++, ${axis2Index}--;
            }
        } else {
            tNi ${axis1Index} = min(cu.${planeAxis1}g1, index2);
            tNi ${axis2Index} = max(1l, index2 - cu.${planeAxis1}g1 + 1);
            for (tNi s=1; s<=steps; s++){
                cu.Q[cu.dirn${dir90}(i,j,k)].q[${dir90}] = cu.Q[cu.index(i, j, k)].q[${dir90}];
                ${axis1Index}--, ${axis2Index}++;
            }
        }
    }
% end
}



